// <auto-generated />
using System;
using ClaimRequest.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClaimRequest.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250313025755_fix entity ot request")]
    partial class fixentityotrequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClaimRequest.Domain.AbnormalCases.AbnormalCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AbnormalType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AbnormalCases", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AttendanceRecords.AttendanceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsLateCome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeaveEarly")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceRecords", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AuditLogs.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("OverTimeRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OverTimeRequestId");

                    b.ToTable("OverTimeDates", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeEffort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<Guid>("OverTimeDateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OverTimeMemberId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OverTimeDateId");

                    b.HasIndex("OverTimeMemberId", "OverTimeDateId")
                        .IsUnique();

                    b.ToTable("OverTimeEffort", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("OverTimeMembers", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("OverTimeRequests", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ClaimFee")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ExpectApproveDay")
                        .HasColumnType("date");

                    b.Property<byte>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("OtherReasonText")
                        .HasColumnType("text");

                    b.Property<byte>("Partial")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReasonId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("UserId");

                    b.ToTable("Claims", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.ClaimDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AbnormalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("LateEarlyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AbnormalId")
                        .IsUnique();

                    b.HasIndex("ClaimId");

                    b.HasIndex("LateEarlyId")
                        .IsUnique();

                    b.ToTable("ClaimDetails", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.InformTo", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("InformTo", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.CompanySettings.CompanySetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LimitDayOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(12);

                    b.Property<TimeOnly>("WorkEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("WorkStartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("CompanySettings", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.EmailTemplates.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.LateEarlyCases.LateEarlyCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EarlyTimeSpan")
                        .HasColumnType("interval");

                    b.Property<bool>("IsEarlyLeave")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLateCome")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("LateTimeSpan")
                        .HasColumnType("interval");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LateEarlyCases", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("IsSoftDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Projects", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uuid");

                    b.Property<byte>("RoleInProject")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("ProjectMembers", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.Reason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOther")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<byte>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<Guid>("RequestTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Reasons", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.ReasonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("ReasonTypes", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.SitesAndRooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Rooms", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.SitesAndRooms.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sites", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Departments", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("numeric");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("IsSoftDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Rank")
                        .HasColumnType("smallint");

                    b.Property<byte>("Role")
                        .HasColumnType("smallint");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)2);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AbnormalCases.AbnormalCase", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("AbnormalCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AttendanceRecords.AttendanceRecord", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AuditLogs.AuditLog", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Claims.Claim", "Claim")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeDate", b =>
                {
                    b.HasOne("ClaimRequest.Domain.ClaimOverTime.OverTimeRequest", "OverTimeRequest")
                        .WithMany("OverTimeDates")
                        .HasForeignKey("OverTimeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverTimeRequest");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeEffort", b =>
                {
                    b.HasOne("ClaimRequest.Domain.ClaimOverTime.OverTimeDate", "OverTimeDate")
                        .WithMany("OverTimeEfforts")
                        .HasForeignKey("OverTimeDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.ClaimOverTime.OverTimeMember", "OverTimeMember")
                        .WithMany("OverTimeEfforts")
                        .HasForeignKey("OverTimeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverTimeDate");

                    b.Navigation("OverTimeMember");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeMember", b =>
                {
                    b.HasOne("ClaimRequest.Domain.ClaimOverTime.OverTimeRequest", "Request")
                        .WithMany("OverTimeMembers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("OverTimeMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeRequest", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.User", "Approver")
                        .WithMany("ForApproveOverTimeRequests")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Projects.Project", "Project")
                        .WithMany("OvertimeRequests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "CreatedByUser")
                        .WithMany("ForConfirmOverTimeRequests")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.Claim", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Projects.Project", null)
                        .WithMany("Claims")
                        .HasForeignKey("ProjectId");

                    b.HasOne("ClaimRequest.Domain.Reasons.Reason", "Reason")
                        .WithMany("Claims")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Reason");

                    b.Navigation("Supervisor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.ClaimDetail", b =>
                {
                    b.HasOne("ClaimRequest.Domain.AbnormalCases.AbnormalCase", "AbnormalCase")
                        .WithOne("ClaimDetail")
                        .HasForeignKey("ClaimRequest.Domain.Claims.ClaimDetail", "AbnormalId");

                    b.HasOne("ClaimRequest.Domain.Claims.Claim", "Claim")
                        .WithMany("ClaimDetails")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.LateEarlyCases.LateEarlyCase", "LateEarlyCase")
                        .WithOne("ClaimDetail")
                        .HasForeignKey("ClaimRequest.Domain.Claims.ClaimDetail", "LateEarlyId");

                    b.Navigation("AbnormalCase");

                    b.Navigation("Claim");

                    b.Navigation("LateEarlyCase");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.InformTo", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Claims.Claim", "Claim")
                        .WithMany("InformTos")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.LateEarlyCases.LateEarlyCase", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("LateEarlyCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.ProjectMember", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Projects.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.Reason", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Reasons.ReasonType", "ReasonType")
                        .WithMany("Reasons")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReasonType");
                });

            modelBuilder.Entity("ClaimRequest.Domain.SitesAndRooms.Room", b =>
                {
                    b.HasOne("ClaimRequest.Domain.SitesAndRooms.Site", "Site")
                        .WithMany("Rooms")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.RefreshToken", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.User", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.Department", "Departments")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AbnormalCases.AbnormalCase", b =>
                {
                    b.Navigation("ClaimDetail");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeDate", b =>
                {
                    b.Navigation("OverTimeEfforts");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeMember", b =>
                {
                    b.Navigation("OverTimeEfforts");
                });

            modelBuilder.Entity("ClaimRequest.Domain.ClaimOverTime.OverTimeRequest", b =>
                {
                    b.Navigation("OverTimeDates");

                    b.Navigation("OverTimeMembers");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.Claim", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ClaimDetails");

                    b.Navigation("InformTos");
                });

            modelBuilder.Entity("ClaimRequest.Domain.LateEarlyCases.LateEarlyCase", b =>
                {
                    b.Navigation("ClaimDetail");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.Project", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Members");

                    b.Navigation("OvertimeRequests");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.Reason", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.ReasonType", b =>
                {
                    b.Navigation("Reasons");
                });

            modelBuilder.Entity("ClaimRequest.Domain.SitesAndRooms.Site", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.User", b =>
                {
                    b.Navigation("AbnormalCases");

                    b.Navigation("AttendanceRecords");

                    b.Navigation("AuditLogs");

                    b.Navigation("Claims");

                    b.Navigation("ForApproveOverTimeRequests");

                    b.Navigation("ForConfirmOverTimeRequests");

                    b.Navigation("LateEarlyCases");

                    b.Navigation("OverTimeMembers");

                    b.Navigation("ProjectMembers");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
