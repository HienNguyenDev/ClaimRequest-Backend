// <auto-generated />
using System;
using ClaimRequest.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClaimRequest.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250210020946_ChangeUserRoleEnum")]
    partial class ChangeUserRoleEnum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClaimRequest.Domain.AttendanceRecords.AttendanceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("WorkStatus")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceRecord", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AuditLogs.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ClaimFee")
                        .HasColumnType("numeric");

                    b.Property<byte>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("OtherReasonText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("RoleInProject")
                        .HasColumnType("smallint");

                    b.Property<string>("StaffDepartment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("UserId");

                    b.ToTable("Claims", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.ClaimDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalHours")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClaimID");

                    b.ToTable("ClaimDetails", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.CompanySettings.CompanySetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LimitDayOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(12);

                    b.Property<TimeSpan>("WorkEndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkStartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("CompanySetting", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.EmailTemplate.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("IsSoftDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Projects", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uuid");

                    b.Property<byte>("RoleInProject")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("ProjectMembers", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.Reason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOther")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<byte>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<Guid>("RequestTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Reasons", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.ReasonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("ReasonTypes", "public");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("numeric");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("IsSoftDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Rank")
                        .HasColumnType("smallint");

                    b.Property<byte>("Role")
                        .HasColumnType("smallint");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)2);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            BaseSalary = 100000m,
                            Department = "Soumaki",
                            Email = "john.doe@gmail.com",
                            FullName = "John Doe",
                            IsSoftDelete = (byte)0,
                            Password = "$2a$11$s9Z7z8J7q6X5Y4w3v2Z1Ou1Z3X4Y5W6V7B8C9D0E1F2G3H4I5J6K7L8M9N0O",
                            Rank = (byte)4,
                            Role = (byte)1,
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("ClaimRequest.Domain.AttendanceRecords.AttendanceRecord", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.AuditLogs.AuditLog", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Claims.Claim", "Claim")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.Claim", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Projects.Project", "Project")
                        .WithMany("Claims")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Reasons.Reason", "Reason")
                        .WithMany("Claims")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Reason");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.ClaimDetails", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Claims.Claim", "Claim")
                        .WithMany("ClaimDetails")
                        .HasForeignKey("ClaimID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.ProjectMember", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Projects.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.Domain.Users.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.Reason", b =>
                {
                    b.HasOne("ClaimRequest.Domain.Reasons.ReasonType", "ReasonType")
                        .WithMany("Reasons")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReasonType");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Claims.Claim", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ClaimDetails");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Projects.Project", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.Reason", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Reasons.ReasonType", b =>
                {
                    b.Navigation("Reasons");
                });

            modelBuilder.Entity("ClaimRequest.Domain.Users.User", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("AuditLogs");

                    b.Navigation("Claims");

                    b.Navigation("ProjectMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
